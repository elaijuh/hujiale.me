<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>古建 on 栖雲樓</title><link>https://hujiale.me/tags/%E5%8F%A4%E5%BB%BA/</link><description>Recent content in 古建 on 栖雲樓</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Fri, 31 May 2019 00:52:32 +0800</lastBuildDate><atom:link href="https://hujiale.me/tags/%E5%8F%A4%E5%BB%BA/index.xml" rel="self" type="application/rss+xml"/><item><title>酉阳杂俎一，时隔七年的龙脑香</title><link>https://hujiale.me/%E9%85%89%E9%98%B3%E6%9D%82%E4%BF%8E%E4%B8%80%E6%97%B6%E9%9A%94%E4%B8%83%E5%B9%B4%E7%9A%84%E9%BE%99%E8%84%91%E9%A6%99/</link><pubDate>Tue, 12 Nov 2019 01:42:00 +0800</pubDate><guid>https://hujiale.me/%E9%85%89%E9%98%B3%E6%9D%82%E4%BF%8E%E4%B8%80%E6%97%B6%E9%9A%94%E4%B8%83%E5%B9%B4%E7%9A%84%E9%BE%99%E8%84%91%E9%A6%99/</guid><description>&lt;figure>&lt;img src="https://i.loli.net/2019/11/12/roA9KR2vN7z4euC.jpg" width="400"/>
&lt;/figure>
&lt;p>唐天宝末年，越南向我大天朝进贡龙脑。龙脑自龙脑树提取，于当时算是罕有，仅印度尼西亚到马来亚的婆罗洲（今加里曼丹岛），马来半岛，苏门答腊岛三地的龙脑树有产。或许龙脑闻着和樟脑有点像，许多人就傻傻分不清了。屈大均在《广东新语》说“龙脑香，出佛打泥者良，来自番舶，粤人以樟脑乱之。樟脑本樟树脂，色白如雪，故谓之脑。其出韶州者曰韶脑。樟脑以人力，龙脑以天生者也。”。此佛打泥即今泰南北大年府地域。龙脑像蝉似蚕，通体剔透，故又称冰片。波斯人说只有老的龙脑树节才砍得出龙脑，而在宫中都唤作瑞龙脑，取其祥瑞之意。&lt;/p>
&lt;p>龙脑香气四溢，能散漫到十步之遥，唐玄宗得此宝贝，自然是要赏赐给杨贵妃的。据说后来杨贵妃把玄宗送的十颗龙脑里的三颗送与安禄山，不知道安禄山兵反之时，身上有没有带着龙脑，皇上要是闻着了定是百感交集。&lt;/p>
&lt;p>有一年夏天，玄宗和亲王下棋，让贺怀智在边上弹琵琶。这个贺怀智要提一提。元稹的《琵琶歌》里写道“玄宗偏许贺怀智，段师此艺还相匹。”，贺怀智曾用石头作琵琶，琴艺十分了得，后世德宗年间的段善本和尚才能与其相提并论。当日风和日丽，杨贵妃在棋局旁侍立，正等着皇上赢棋再赏几颗龙脑呢，眼见皇上数了数棋子是要输的节奏啊，赶紧把抱着的宠物狗子放到身边。狗子心领神会，撒丫子就上了棋盘，棋局自然是黄了，皇上自然也是大喜。正得意时，吹来一阵风，把贵妃的领巾吹到贺怀智头巾上，就这么搭了很久，直到贺怀智站起转过身来领巾才掉下来。贺怀智回到家，觉得身上有奇香，想起刚才贵妃那条领巾，于是赶紧把自己头巾解了下来，藏在了锦囊之中，估计一个星期没洗手。&lt;/p>
&lt;p>安史之乱平定后，玄宗日夜思念贵妃，贺怀智想起了那条藏了七八年的头巾，便把锦囊献给了皇上，并说明了那天的情况。皇上一打开锦囊，立马就泪崩了，这是瑞龙脑的香味啊，而我贵妃安在。&lt;/p></description></item><item><title>肇庆梅庵考察报告</title><link>https://hujiale.me/%E8%82%87%E5%BA%86%E6%A2%85%E5%BA%B5%E8%80%83%E5%AF%9F%E6%8A%A5%E5%91%8A/</link><pubDate>Fri, 31 May 2019 00:52:32 +0800</pubDate><guid>https://hujiale.me/%E8%82%87%E5%BA%86%E6%A2%85%E5%BA%B5%E8%80%83%E5%AF%9F%E6%8A%A5%E5%91%8A/</guid><description>&lt;p>&lt;strong>摘要&lt;/strong>&lt;/p>
&lt;p>本文通过对广东省肇庆市端州区的梅庵实地观摩考察，试图对宋代的木构建筑做一个初步的认识。尤其是对《营造法式》中所提到的大木作，主要为柱，梁，斗栱等木构建进行实地考察和对比认识。&lt;/p>
&lt;p>&lt;strong>关键字&lt;/strong>&lt;/p>
&lt;p>梅庵，古建筑，营造法式，大木作&lt;/p>
&lt;p>&lt;strong>引言&lt;/strong>&lt;/p>
&lt;p>中国古代木构建筑，大部分分布在北方，尤其是山西省。这和历代王朝的定都位置有直接关系，也和自然环境的南北差异有关系。岭南地区所遗存的宋代以前的木构建筑极少。广东省在北宋时期属于广南东路，在行政区域划分上，广州和端州属于同等级别。当时的端州如今仍保留了古名，属于肇庆市的一个行政区。肇庆被西江分为南北两部，端州区在江北，而梅庵则坐落在离江不远处的城西梅庵岗上。由于并未感觉到大肆宣传和被民居所包围，梅庵并不是十分显眼，然而这座北宋始建的大殿就这样安静得站立了一千多年。相传北宋至道二年，智远和尚在六祖慧能插梅的岗上建庵取名梅庵以为纪念。自此，梅庵虽经后世移用，亦多有修葺，然而庵内大雄宝殿的大木作仍然保留了宋代甚至宋以前追古的风格。本文将对照《法式》中大木作的主要构件，如柱，梁，额，槫，椽，蜀柱，串，襻间，替木等对梅庵进行考察。&lt;/p>
&lt;p>&lt;strong>正文&lt;/strong>&lt;/p>
&lt;p>梅庵大雄宝殿面阔三间（山门外介绍牌所记录为面广五间，而在中国建筑史课程中将梅庵归入了三间。实际上梅庵立面只用四柱，没有稍间，山面内没有柱，故此处沿用课程的说法），进深三间。为单檐硬山顶。十椽架屋，前后乳栿对六椽栿用四柱。斗栱用材 6x4 寸，约 18-18.6cm，为六等材。《法式》中规定六等材用于亭榭以及小厅堂，造作功亦以六等材为准，是使用最频繁的材等级。六等材模数的分为 18/15=1.2cm，宋营造尺一尺为 31.2cm，本文为计算简单化，以 30cm 整数位一尺。由于测绘技能不足以及设备缺乏，本次考察并不作精确测绘，而以观察为主。&lt;/p>
&lt;p>&lt;img src="https://i.loli.net/2019/09/17/8C3GNkQW2ZDeXwf.png" alt="ha">&lt;/p>
&lt;p>（一）柱&lt;/p>
&lt;p>梅庵大雄殿地盘柱网 4x4。《法式》卷五有”厅堂等屋内柱皆随举势定其短长，以下檐柱为则“，又有”若副阶，廊舍，下檐柱虽长不越间之广“。从图 1 可见当心间广是大于柱高的。图 1 亦可见檐口呈向上曲线，说明角柱有生起。《法式》规定生起随间数而定，十三间殿堂角柱比平柱高 1 尺 2 寸，每减两间递减 2 寸，直至三间生高 2 寸。2 寸大约 6cm，直接观察角柱并不明显，但檐口的曲线还是很明显的，可惜无法进行测量。《法式》有“凡杀梭柱之法，随柱之长，分为三分，上一分又分为三分，如栱卷杀，渐收至上径比栌斗底四周各出四分”。观察山门与大殿内所有用柱皆为梭柱，两头有卷杀，见图 2 图 3。柱下部卷杀的实例到宋代仅在南方可见，如广州光孝寺大殿，福建莆田玄妙观三清殿。《法式》对柱下部卷杀语焉不详，已无严格如上部卷杀之规定，可见宋代实际营造中主要为柱上部卷杀。另外，大殿柱础为简单造型，有收分，并无纹饰。倒是山门的柱础上有蒜瓣型柱櫍，不知大殿柱础是否是宋代遗存或后世改换。&lt;/p>
&lt;p>（二）梁，串，襻间&lt;/p>
&lt;p>大殿无平闇，平棊，所有梁皆为明栿。图 4，图 5 可见，乳栿，六椽栿，四椽栿，平梁皆有卷杀，为月梁。梁头成斜项，与材同宽，伸入铺作。《法式》有“第六瓣尽处下䫜五分”，又有注“去三分留二分作琴面”，可惜在大殿梁上未见琴面。平梁上无驼峰，直出一斗，斗上置襻间，又出重栱承替木于脊槫下。有趣的是叉手似与铺作相连，由于距离比较远，看不清楚。其下托脚也有类似情况。再看乳栿，其上无驼峰，直出铺作，铺作上承襻间，又出一栱承槫。乳栿头出柱。乳栿下顺栿串为丁字栱两头出柱，丁字栱亦用于六椽栿。&lt;/p>
&lt;p>（三）铺作&lt;/p>
&lt;p>梅庵大雄殿铺作规格很高，为广东省内孤例，在全国亦罕见。外檐出一杪三下昂七铺作，见图 6，里转四跳，见图 7。斗有四制：栌斗（铺作最下层之大斗），交互斗（出跳之栱昂上，斗上十字开口，上承十字交叉之构件），齐心斗（用于栱心，顺身开口），散斗（用于栱两端）。殿内皆为皿斗。皿斗是为表现古老的栌下所垫皿板而做的收分后又外凸的形制。宋代福建，广东地区常见皿斗。栱有五种：泥道栱（与立面平行，单材），华栱（垂直立面向外跳出，因主受力为足材），瓜子栱（位于跳头上），慢栱（栱上之栱），令栱（最上跳跳头之上与槫下）。这些不同的栱都能清楚观察到。再看昂，《法式》记载三种昂尖，“自斗外斜杀向下，留厚二分，昂面中䫜二分，令䫜势圆和”；”亦有于昂面上随䫜加一分，讹杀至两棱者，谓之琴面昂，亦有自斗外斜杀至尖者，其昂面平直，谓之批竹昂。“大殿下昂符合《法式》记载之琴面昂，有䫜面，有讹杀至两棱，从昂头可以清晰看出。若参照梁思成先生手绘的宋式斗拱的组成及各部件名称，可见外檐铺作亦有华头子，衬枋头。是十分完整的宋代铺作规格。再看枋，图 8 能清晰看到从外到内排列橑檐枋，两条罗汉枋（此处不确定三下昂承托的两条是否都叫罗汉枋）和柱头枋。栌斗皆坐于普柏枋上。殿内里转有挑斡和鞾楔，见图 7。斗，栱，昂，枋说完，另外有一个很有趣的发现，栱上有栓连接，见图 6 图 7。《法式》卷四《飞昂》云：”凡昂栓，广四分至五分，厚二分。若四铺作，即于第一跳上用之；五铺作至八铺作，并于第二跳上用之。并上彻昂背，下入栱身之半或三分之一。”潘谷西先生在《营造法式解读》一书中说昂栓实物中未见有，在梅庵看到了。不但殿内有昂栓过华栱，外檐泥道栱上之横栱两侧都有栓通过，实为罕见。&lt;/p>
&lt;p>&lt;strong>总结&lt;/strong>&lt;/p>
&lt;p>通过这次对肇庆梅庵的实地考察，对《营造法式》有了更具象的认识。由于年代久远，中国建筑一门也多为口口相传，即便史料有传承也或多或少有讹误，格物致知便是古建学习中十分重要的方法。可惜的是，无法实地测量，希望以后能有此机会。幸运的是，宋代的《营造法式》能保留下来，宋以前的木构建筑能遗存下来，尤其是岭南地区的古建更为珍贵，需要很好的保护。所谓民族文化自信，就是要把属于我们自己的引以为傲的文化，拿出去看看，能立于世界文化之林而毫无愧色。中国古建筑在我看来，无疑就是这样一种文化。&lt;/p>
&lt;p>&lt;strong>参考文献&lt;/strong>&lt;/p>
&lt;p>[1] 潘谷西，何建忠著《营造法式》解读（修订版），东南大学出版社&lt;br>
[2] 李允鉌著 华夏意匠，天津大学出版社&lt;br>
[3] 梁思成《图像中国建筑史》手绘图，读库&lt;br>
[4] 王力主编 王力古汉语字典，中华书局&lt;/p></description></item><item><title>Install Youcompleteme with pathogen in neovim</title><link>https://hujiale.me/install-youcompleteme-with-pathogen-in-neovim/</link><pubDate>Fri, 13 Oct 2017 17:20:40 +0800</pubDate><guid>https://hujiale.me/install-youcompleteme-with-pathogen-in-neovim/</guid><description>&lt;p>Notes for installing YCM with pathogen, Mac environment.&lt;/p>
&lt;p>Prerequisites:&lt;/p>
&lt;ul>
&lt;li>brew&lt;/li>
&lt;li>cmake&lt;/li>
&lt;li>python3/python2 (here i use python3)&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">
&lt;span class="c1"># 1. Install neovim&lt;/span>
brew install neovim
&lt;span class="c1"># 2. Install neovim python provider&lt;/span>
&lt;span class="c1"># https://neovim.io/doc/user/provider.html#provider-python&lt;/span>
pip3 install --upgrade neovim
&lt;span class="c1"># 3. Install YouCompleteMe&lt;/span>
&lt;span class="nb">cd&lt;/span> ~/.vim/bundle
git clone https://github.com/Valloric/YouCompleteMe.git &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nb">cd&lt;/span> &lt;span class="nv">$_&lt;/span>
git submodule update --init --recursive
&lt;span class="c1"># here i use system clang rather than downloading, and i only need c family, golang, javascript, rust completer&lt;/span>
python3 install.py --system-libclang --clang-completer --go-completer --js-completer --rust-completer
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Cron need root password to be set</title><link>https://hujiale.me/cron-need-root-password-to-be-set/</link><pubDate>Sat, 30 Sep 2017 14:51:31 +0800</pubDate><guid>https://hujiale.me/cron-need-root-password-to-be-set/</guid><description>&lt;p>I am using Digital Ocean with password login disabled. I provision new machine using ansible userdata, so that every team member can login by ssh.
Everything works fine until one day I find cron job doesn&amp;rsquo;t work correctly under root.&lt;/p>
&lt;p>The error log is
&lt;code>pam_unix(cron:account): expired password for user root (root enforced)&lt;/code>&lt;/p>
&lt;p>The tricky part is, when creating a new droplet, Digital Ocean needs you to login by initial password and reset it immediately. As I am using terraform to create new droplet and ansible to provision it, I miss the reset password part. But how immediate reset works? The file &lt;code>/etc/shadow&lt;/code> is the key to it. It saves the user and password information. It looks like this:&lt;/p>
&lt;p>&lt;code>root:&amp;lt;hashed_password&amp;gt;:0:0:14600:14:::&lt;/code>&lt;/p>
&lt;p>Each field in the shadow file is also separated with &amp;ldquo;:&amp;rdquo; colon characters, and are as follows:&lt;/p>
&lt;p>Username, up to 8 characters. Case-sensitive, usually all lowercase. A direct match to the username in the /etc/passwd file.&lt;/p>
&lt;p>Password, 13 character encrypted. A blank entry (eg. ::) indicates a password is not required to log in (usually a bad idea), and a &amp;ldquo;&lt;em>&amp;rdquo; entry (eg. :&lt;/em>:) indicates the account has been disabled.&lt;/p>
&lt;p>The number of days (since January 1, 1970) since the password was last changed.&lt;/p>
&lt;p>The number of days before password may be changed (0 indicates it may be changed at any time)&lt;/p>
&lt;p>The number of days after which password must be changed (99999 indicates user can keep his or her password unchanged for many, many years)&lt;/p>
&lt;p>The number of days to warn user of an expiring password (7 for a full week)&lt;/p>
&lt;p>The number of days after password expires that account is disabled&lt;/p>
&lt;p>The number of days since January 1, 1970 that an account has been disabled&lt;/p>
&lt;p>A reserved field for possible future use&lt;/p>
&lt;p>There is also a easy command &lt;code>chage&lt;/code> to check these information with human readable format, &lt;code>sudo chage -l root&lt;/code>&lt;/p>
&lt;p>So to solve the cron problem, instead of update the VPS set initial root password, I can just update number of days since the password was last changed.&lt;/p>
&lt;p>&lt;code>sudo chage -d 2017-09-30 root&lt;/code>&lt;/p>
&lt;p>Now cron should work as expected.&lt;/p></description></item><item><title>Get ready for FreeBSD</title><link>https://hujiale.me/get-ready-for-freebsd/</link><pubDate>Tue, 12 Sep 2017 00:21:39 +0800</pubDate><guid>https://hujiale.me/get-ready-for-freebsd/</guid><description>&lt;p>I would like to install both FreeBSD and Win10 onto my old workstation. FreeBSD offical manual is quite straight forward and smooth for beginner to complete installation. It just misses some pieces for dual boot with old BIOS, here it is.&lt;/p>
&lt;p>I am installing version 11.1 and still using ufs with old BIOS, most parts should be compatible to the previous versions.&lt;/p>
&lt;p>Now when you come to &lt;code>Partitioning&lt;/code> step, choose &lt;code>Manual&lt;/code>, you might probably see a divice like &lt;strong>ada0&lt;/strong> with &lt;strong>MBR&lt;/strong> label followed by &lt;strong>ada0s1&lt;/strong> and &lt;strong>ada0s2&lt;/strong> with &lt;strong>NTFS&lt;/strong> label. I have Win10 already installed first, and this is the recommended way as I want FreeBSD to rewrite MBR later. Now create a new section under ada0 and choose freebsd type. From this newly created freebse MBR, create another freebsd-ufs (the size could be the rest of the disk) and freebsd-swap (I set it 4G same as my memory size). Now when reboot, the MBR will boot FreeBSD but not Win10 any longer. No worry, one more step after login: &lt;code>sudo boot0cfg -B ada0&lt;/code>. This allow boot select from MBR, you will see Win options there.&lt;/p>
&lt;p>If everything works just fine, kernel will load drivers for hardware and it&amp;rsquo;s good to go. &lt;code>pkg update&lt;/code> and &lt;code>pkg install xorg&lt;/code>, &lt;code>pkg install xf86-video-ati&lt;/code> (my video adapter is Radeon HD 6850). OK, enjoy UNIX.&lt;/p></description></item><item><title>Cookie sync in programmatic advertising</title><link>https://hujiale.me/cookie-sync-in-programmatic-advertising/</link><pubDate>Wed, 29 Mar 2017 11:35:33 +0800</pubDate><guid>https://hujiale.me/cookie-sync-in-programmatic-advertising/</guid><description>&lt;p>Cookie is a browser mechanism to store small piece of information in client’s browser. Now days, cookie is widely used in:&lt;/p>
&lt;pre>&lt;code>- Sign in. Store session in cookie for server side authentication.
- User preference. It stores user preference and load them when open the site which makes the UI user friendly.
- eCommerce. Remember the good in your shopping cart.
- Tracking behavior. It records the user behavior for better targeting.
- Advertising. It carries various information through couple of counter parties in advertising realm. DSP, SSP, Ad Exchange, etc.
&lt;/code>&lt;/pre>
&lt;p>Though cookie is prevalent, for security reason, cross domain policy restricts cookie only in the domain which cookie is set. A cookie set by &lt;em>foo.com&lt;/em> is not allowed to be accessed by &lt;em>bar.com&lt;/em>. (Cookies do not provide isolation by port). In advertising, cookie might have user ID and information stored which needs to be shared among individual parties with different domains. How could that be achieved?&lt;/p>
&lt;p>Introducing cookie sync (or cookie mapping).&lt;/p>
&lt;p>First we will elaborate how cookie sync works with a real life scenario, then we track the data flow, finally you will find a runnable code example in our github repo and you can read through and run by yourself.&lt;/p>
&lt;h3 id="scenario---retargeting-users">Scenario - retargeting users&lt;/h3>
&lt;p>A demand book selling site want to retarget users who did browse the book but finally left without conducting a payment. A user might leave for many reasons, but as long as the user shows interest in a particular book, the company would like to retarget the user at a later time when the user intends to buy books again.&lt;/p>
&lt;p>Demand site asks DSP for help to achieve that. Once a user browses a book, a pixel will be triggered to DSP. DSP generates an unique ID for that user (anonymous) and keeps in database. DSP also sets cookie in client side, so that next time when the user come back(piggyback), DSP should know. But DSP alone is not enough, because the book company wants the user to see the book when he is browsing another publisher sites. DSP will bid for inventory to show the book ad, but at what price is most effective? Obviously, if DSP knows who is the user browsing that inventory then it can make wise bid strategy. So DSP needs to sync information with SSP (who requests the inventory auction) by cookie.&lt;/p>
&lt;p>If you still remember, DSP sets a cookie for user (DSPID), it also responses with a pixel to be triggered to SSP site carrying the DSPID in URL. Now SSP knows the user and the DSPID of the user. SSP generates an SSPID and stored it together with DSPID in database(it’s not a MUST), and then set SSP cookie to user browser. After that, SSP redirect back to DSP with SSPID attached. So that DSP knows the mapping of DSPID/SSPID. When a ad request is issued from publisher site, SSP will call for auction to every DSP with SSPID carried as well as the ad meta. When DSP received the auction call from SSP, if it sees the SSPID and find in database, then DSP bid for the inventory, otherwise DSP should conduct a negative bid strategy. If DSP wins, the user will see the same book ad in publisher site.&lt;/p>
&lt;p>That’s the basic idea of RTB and cookie sync’s role in between.&lt;/p>
&lt;h3 id="flow">Flow&lt;/h3>
&lt;p>&lt;img src="https://hujiale.me/images/cookie-sync.jpeg" alt="cookie-sync">&lt;/p>
&lt;pre>&lt;code>1. User browse the book in demand site which have a pixel embedded
2. A pixel is triggered to DSP. DSP save the DSPID in database
3. DSP set the cookie back to browser and send back a pixel (SSP site)
4. Pixel for SSP, carring DSPID in URL. Start cookie sync
5. Redirect back from SSP with SSPID, cookie is sync
6. DSP now knows the SSPID and update database for DSPID
7. User browser publisher site at a later time
8. Ad tag requests SSP to get an ad to display
9. SSP request an ad auction to every DSP, SSPID is carried in request body as well as ad meta
10. DSP receives the auction request and find the SSPID in database. DSP bids for inventory
11. SSP decides which DSP wins and response with ad information. If our DSP wins, user will see the book again.
&lt;/code>&lt;/pre>
&lt;h3 id="code-example">Code example&lt;/h3>
&lt;p>You can find the runnable code demo &lt;a href="https://github.com/implustech/cookie-sync-demo">here&lt;/a>&lt;/p></description></item><item><title>yiin, free to wording</title><link>https://hujiale.me/yiin-free-to-wording/</link><pubDate>Thu, 09 Mar 2017 22:34:12 +0800</pubDate><guid>https://hujiale.me/yiin-free-to-wording/</guid><description>&lt;p>&lt;a href="https://yiin.life">Yiin(隐)&lt;/a> is an ancient Chinese life style which an individual tends to keep himself away from social life only focusing inside.&lt;/p>
&lt;p>I made this product because sometimes I just feel tired of registering and verification, password things when I want to say something. Saying to yourself or even nobody without asking for any comments or feedback should not have any barriers. It&amp;rsquo;s human nature that you are not asking for passport just for talking, you talk when you want to talk.&lt;/p>
&lt;p>This product is absolutely not involving any fancy style, font, ads. And it is supposed to be hard to find the words back after publish as words should be kept in mind rather than somewhere else (though there is a way to find them back as they are always kept somewhere in internet).&lt;/p>
&lt;p>Thanks to txt.fyi for enlighting.&lt;/p></description></item><item><title>Provision AWS Lightsail with Ansible</title><link>https://hujiale.me/provision-aws-lightsail-with-ansible/</link><pubDate>Wed, 21 Dec 2016 22:18:43 +0800</pubDate><guid>https://hujiale.me/provision-aws-lightsail-with-ansible/</guid><description>&lt;p>Amazon has announced a new cloud service &lt;strong>Lightsail&lt;/strong> recently aiming at DigitalOcean, with exact same price and same spec of node. As a heavy DigitalOcean user, I am more than happy to try the alternative provided by AWS. Creating the first instance is not smooth, I got successfully created the first instance by AWS SDK after 3 weeks in and out mails with the support team.&lt;/p>
&lt;p>TL;DR&lt;/p>
&lt;p>This post is a quick guide on provisioning the instance by Ansible. Before that , some outlines:&lt;/p>
&lt;ul>
&lt;li>The default login account for Lightsail is pretty much depended on the image, while in DigitalOcean it is &lt;strong>root&lt;/strong>.&lt;/li>
&lt;li>Lightsail is using key pair (.pem) for ssh login, you can either use default key pair or create a new pair. After successfully log into the instance, I added a pub ssh id by my preference.&lt;/li>
&lt;li>Everything in docker, as well as ansible&lt;/li>
&lt;/ul>
&lt;h2 id="ansible-playbook">Ansible playbook&lt;/h2>
&lt;p>provision.yml&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yml" data-lang="yml">&lt;span class="nn">---&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>- &lt;span class="nt">hosts&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">cloud &lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">gather_facts&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">False&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">tasks&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Update local known_hosts&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">local_action&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">shell ssh-keyscan -H {{ hostvars[item].ansible_host }} &amp;gt;&amp;gt; ~/.ssh/known_hosts&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">with_items&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;{{ groups.cloud }}&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Install aptitude&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">raw&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">test ! -e /usr/bin/aptitude &amp;amp;&amp;amp; sudo apt-get install -qq aptitude || true&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Install python 2.7&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">raw&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">test ! -e /usr/bin/python &amp;amp;&amp;amp; (sudo apt-get update -qq &amp;amp;&amp;amp; sudo apt-get install -qq python2.7) || true&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Install letsencrypt &lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">raw&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">test ! -e /usr/bin/letsencrypt &amp;amp;&amp;amp; (sudo apt-get update -qq &amp;amp;&amp;amp; sudo apt-get install -qq letsencrypt) || true&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>- &lt;span class="nt">hosts&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">cloud &lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">roles&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">update-apt&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">user&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">swap&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>- &lt;span class="nt">hosts&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">cloud &lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">roles&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># https://github.com/angstwad/docker.ubuntu&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">role&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">angstwad.docker_ubuntu&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">become&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">yes&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">kernel_pkg_state&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">present&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>provision.ini&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-ini" data-lang="ini">&lt;span class="k">[hosts]&lt;/span>
&lt;span class="k">[YOUR_LIGHTSAIL_INSTANCE_NAME] ansible_host=[YOUR_IP] private_ip=[YOUR_PRIVATE_IP]&lt;/span>
&lt;span class="k">[cloud:children]&lt;/span>
&lt;span class="na">hosts&lt;/span>
&lt;span class="k">[cloud:vars]&lt;/span>
&lt;span class="na">ansible_connection&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">ssh&lt;/span>
&lt;span class="na">ansible_user&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">ubuntu&lt;/span>
&lt;span class="na">ansible_ssh_private_key_file&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">~/.ssh/id_rsa&lt;/span>
&lt;span class="na">ansible_python_interpreter&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">/usr/bin/python2.7&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Looking at &lt;code>provision.yml&lt;/code> , the first 3 common tasks are pretty straight forward:&lt;/p>
&lt;ul>
&lt;li>Adding remote instance IP to your local known_hosts&lt;/li>
&lt;li>Install Python&lt;/li>
&lt;li>Install letsencrypt for HTTPS&lt;/li>
&lt;/ul>
&lt;p>Followed by 3 common roles:&lt;/p>
&lt;ul>
&lt;li>Update and upgrade apt&lt;/li>
&lt;li>Create application user in sudo group&lt;/li>
&lt;li>Specify swap file (optional)&lt;/li>
&lt;/ul>
&lt;p>I would like to pick user role as example&lt;/p>
&lt;p>ansible/roles/user/tasks/main.yml&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yml" data-lang="yml">&lt;span class="nn">---&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Ensure user exists&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">become&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">yes&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">user&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">appuser&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">state&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">present&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">shell&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">/bin/bash&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">append&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">yes&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">groups&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">sudo&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Ensure authorized key exists&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">become&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">yes&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">authorized_key&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">user=appuser key=&amp;#34;{{ lookup(&amp;#39;file&amp;#39;, &amp;#39;~/.ssh/id_rsa.pub&amp;#39;) }}&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Copy sudoers&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">become&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">yes&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">copy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">src=./sudoers dest=/etc/sudoers&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This role will create a user &lt;code>appuser&lt;/code> in sudo group for application deploy. So that we don’t need to use the default user &lt;code>ubuntu&lt;/code> every time. Make sure you have added the id pub key into the instance’s &lt;code>authorized_key&lt;/code> file&lt;/p>
&lt;p>The last role is installing docker into the instance, after that you can use any docker command like &lt;code>sudo docker&lt;/code> or &lt;code>sudo docker-compose&lt;/code> in the instance and it’s armed with docker engine now.&lt;/p>
&lt;p>OK now we have a provisioned instance and keep lego it with any application you write. I will suggest to use Ansible docker service as well to depoly your application based on docker image.&lt;/p></description></item><item><title>Https for everything</title><link>https://hujiale.me/https-for-everything/</link><pubDate>Fri, 18 Nov 2016 00:59:57 +0800</pubDate><guid>https://hujiale.me/https-for-everything/</guid><description>&lt;p>HTTPS is highly recommended for every web site, as a web developer I am building both my personal
and company app under https. Applying for the certificates could be a block for you to migrate/build
your site to https as you need to pay for it and it could take quite a while. Thanks to &lt;a href="https://letsencrypt.org/">letsencrypt&lt;/a>
now we can have free open certificate authorify for our sites.&lt;/p>
&lt;p>I will list the least steps to build a site by using &lt;a href="https://certbot.eff.org/">certbot&lt;/a>&lt;/p>
&lt;h4 id="install-certbot">Install certbot&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">wget https://dl.eff.org/certbot-auto
chmod a+x ./certbot-auto
&lt;/code>&lt;/pre>&lt;/div>&lt;p>After that, you can run &lt;code>./certbot-auto --help&lt;/code> to check if it&amp;rsquo;s installed successfully.&lt;/p>
&lt;h4 id="use-certbot-to-generate-certificates">Use certbot to generate certificates&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">./certbot-auto certonly --standalone -d www.yourdomain.com -d sub.yourdomain.com
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Make sure &lt;code>www.yourdomain.com&lt;/code> and &lt;code>sub.yourdomain.com&lt;/code> is online at &lt;code>80&lt;/code> port as this command will
check the validation. You can ignore &lt;code>--standalone&lt;/code> at the moment, it&amp;rsquo;s just a plugin
for certbot to generated software independent certificates. After running the command, there will be 4 files generated
at &lt;code>/etc/letsencrypt&lt;/code>. They are &lt;code>privKey.pem&lt;/code>, &lt;code>fullchain.pem&lt;/code>, &lt;code>cert.pem&lt;/code> and &lt;code>chain.pem&lt;/code>.
Usually the web server only needs to point to the previous two for enableing https.
I will go through you how to point to certificates ad different server (nginx, apache) has different way.
You can google for it by yourself&lt;/p>
&lt;h4 id="renew-the-certificates">Renew the certificates&lt;/h4>
&lt;p>The certificates are only valid for 90 days, luckily the renew is easy.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">./certbot-auto renew
&lt;/code>&lt;/pre>&lt;/div>&lt;p>That&amp;rsquo;s it. If certbot check the certificates are due for renewal, it will renew them.
I also create a daily cron task to renew it automatically.
&lt;code>0 0 * * * ~/certbot-auto renew&lt;/code>&lt;/p>
&lt;hr>
&lt;p>&lt;a href="https://certbot.eff.org/docs/using.html#getting-certificates-and-choosing-plugins">Reference&lt;/a>&lt;/p></description></item><item><title>How to make ngrx/store work with HMR</title><link>https://hujiale.me/how-to-make-ngrx/store-work-with-hmr/</link><pubDate>Sun, 11 Sep 2016 03:26:53 +0800</pubDate><guid>https://hujiale.me/how-to-make-ngrx/store-work-with-hmr/</guid><description>&lt;p>In my previous post, I talked of a way to develop angular 2 app with HMR.
The vendors I use are &lt;em>@angularclass/hmr&lt;/em> and &lt;em>@angularclass/hmr-loader&lt;/em>
Later on, I thought I might need a data flow tool like redux to manage my app state and I found &lt;a href="https://github.com/ngrx/store">ngrx/store&lt;/a>&lt;/p>
&lt;p>@angularclass/hmr injects some &lt;em>hmr&lt;/em> prefix life cycles into the main module to let you to restore the data.
But app state management is optional and you can choose your own way to implement it, so I will walk you through how I implement HMR with ngrx/store&lt;/p>
&lt;h3 id="retrieve-the-current-state">Retrieve the current state&lt;/h3>
&lt;p>To retrive the current app state before it&amp;rsquo;s deposed is easy, just subscribe it:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">_store&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">take&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">subscribe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">s&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">store&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">rootState&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">s&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>That&amp;rsquo;s it&lt;/p>
&lt;h3 id="restore-the-current-state">Restore the current state&lt;/h3>
&lt;p>This is kinda cumbesome as &lt;code>ngrx/store&lt;/code> doesn&amp;rsquo;t provide a way to set the root state, I need to compose a rootReducer to do this.
With the help of &lt;a href="https://github.com/MikeRyan52">Mike Ryan&lt;/a>, I figure out a way to do that.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="kd">function&lt;/span> &lt;span class="nx">stateSetter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">reducer&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">ActionReducer&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nx">any&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">ActionReducer&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nx">any&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">state&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">action&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">action&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">type&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="s1">&amp;#39;SET_ROOT_STATE&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">action&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">payload&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">reducer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">state&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">action&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">rootReducer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">compose&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">stateSetter&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">combineReducers&lt;/span>&lt;span class="p">)({&lt;/span>
&lt;span class="c1">// your reducers here
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">})&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now I can dispatch a &lt;code>SET_ROOT_STATE&lt;/code> action to reset the app state to what I have stored&lt;/p>
&lt;h3 id="get-everything-together">Get everything together&lt;/h3>
&lt;p>This is very much based on &lt;a href="https://github.com/mgechev/angular2-seed">angular2-seed&lt;/a>, you might have your own &lt;code>main.ts&lt;/code> though&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="kr">import&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">platformBrowserDynamic&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s1">&amp;#39;@angular/platform-browser-dynamic&amp;#39;&lt;/span>
&lt;span class="kr">import&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">BrowserModule&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s1">&amp;#39;@angular/platform-browser&amp;#39;&lt;/span>
&lt;span class="kr">import&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">RouterModule&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s1">&amp;#39;@angular/router&amp;#39;&lt;/span>
&lt;span class="kr">import&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">NgModule&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">ApplicationRef&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s1">&amp;#39;@angular/core&amp;#39;&lt;/span>
&lt;span class="kr">import&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">removeNgStyles&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">createNewHosts&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">createInputTransfer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">bootloader&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s1">&amp;#39;@angularclass/hmr&amp;#39;&lt;/span>
&lt;span class="kr">import&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">compose&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s1">&amp;#39;@ngrx/core/compose&amp;#39;&lt;/span>
&lt;span class="kr">import&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">Store&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">StoreModule&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">ActionReducer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">combineReducers&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s1">&amp;#39;@ngrx/store&amp;#39;&lt;/span>
&lt;span class="kr">import&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">StoreDevtoolsModule&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s1">&amp;#39;@ngrx/store-devtools&amp;#39;&lt;/span>
&lt;span class="kr">import&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">StoreLogMonitorModule&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">useLogMonitor&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s1">&amp;#39;@ngrx/store-log-monitor&amp;#39;&lt;/span>
&lt;span class="kr">import&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">AppModule&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s1">&amp;#39;./app&amp;#39;&lt;/span>
&lt;span class="kr">import&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">AppComponent&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s1">&amp;#39;./app/app.component&amp;#39;&lt;/span>
&lt;span class="kr">import&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">message&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s1">&amp;#39;./reducer&amp;#39;&lt;/span>
&lt;span class="c1">// Generate a reducer to set the root state
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">function&lt;/span> &lt;span class="nx">stateSetter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">reducer&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">ActionReducer&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nx">any&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">ActionReducer&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nx">any&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">state&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">action&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">action&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">type&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="s1">&amp;#39;SET_ROOT_STATE&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">action&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">payload&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">reducer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">state&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">action&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">rootReducer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">compose&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">stateSetter&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">combineReducers&lt;/span>&lt;span class="p">)({&lt;/span>
&lt;span class="nx">message&lt;/span>
&lt;span class="p">})&lt;/span>
&lt;span class="kd">let&lt;/span> &lt;span class="nx">imports&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="nx">BrowserModule&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">RouterModule&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">forRoot&lt;/span>&lt;span class="p">([],&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">useHash&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kc">true&lt;/span>
&lt;span class="p">}),&lt;/span>
&lt;span class="c1">// app
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">AppModule&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="c1">// vendors
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">StoreModule&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">provideStore&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">rootReducer&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">]&lt;/span>
&lt;span class="c1">// Enable HMR and ngrx/devtools in hot reload mode
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">module&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">hot&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nx">imports&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">push&lt;/span>&lt;span class="p">(...[&lt;/span>
&lt;span class="nx">StoreDevtoolsModule&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">instrumentStore&lt;/span>&lt;span class="p">({&lt;/span>
&lt;span class="nx">monitor&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">useLogMonitor&lt;/span>&lt;span class="p">({&lt;/span>
&lt;span class="nx">visible&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">position&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;right&amp;#39;&lt;/span>
&lt;span class="p">})&lt;/span>
&lt;span class="p">}),&lt;/span>
&lt;span class="nx">StoreLogMonitorModule&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">])&lt;/span>
&lt;span class="err">@&lt;/span>&lt;span class="nx">NgModule&lt;/span>&lt;span class="p">({&lt;/span>
&lt;span class="nx">bootstrap&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[&lt;/span> &lt;span class="nx">AppComponent&lt;/span> &lt;span class="p">],&lt;/span>
&lt;span class="nx">declarations&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[&lt;/span> &lt;span class="nx">AppComponent&lt;/span> &lt;span class="p">],&lt;/span>
&lt;span class="nx">imports&lt;/span>
&lt;span class="p">})&lt;/span>
&lt;span class="kr">class&lt;/span> &lt;span class="nx">MainModule&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">constructor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kr">public&lt;/span> &lt;span class="nx">appRef&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">ApplicationRef&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kr">private&lt;/span> &lt;span class="nx">_store&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">Store&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nx">any&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;span class="nx">hmrOnInit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">store&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="nx">store&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="o">!&lt;/span>&lt;span class="nx">store&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">rootState&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">return&lt;/span>
&lt;span class="c1">// restore state by dispatch a SET_ROOT_STATE action
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">store&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">rootState&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">_store&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">dispatch&lt;/span>&lt;span class="p">({&lt;/span>
&lt;span class="nx">type&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;SET_ROOT_STATE&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">payload&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">store&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">rootState&lt;/span>
&lt;span class="p">})&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;restoreInputValues&amp;#39;&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="nx">store&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">store&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">restoreInputValues&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">appRef&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">tick&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="nb">Object&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">keys&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">store&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">forEach&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">prop&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="k">delete&lt;/span> &lt;span class="nx">store&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">prop&lt;/span>&lt;span class="p">])&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">hmrOnDestroy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">store&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kr">const&lt;/span> &lt;span class="nx">cmpLocation&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">appRef&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">components&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">map&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">cmp&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">cmp&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">location&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">nativeElement&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">_store&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">take&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">subscribe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">s&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">store&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">rootState&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">s&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">store&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">disposeOldHosts&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">createNewHosts&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">cmpLocation&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">store&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">restoreInputValues&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">createInputTransfer&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="nx">removeNgStyles&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">hmrAfterDestroy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">store&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">store&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">disposeOldHosts&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">delete&lt;/span> &lt;span class="nx">store&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">disposeOldHosts&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kr">export&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="nx">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">platformBrowserDynamic&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nx">bootstrapModule&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">MainModule&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">bootloader&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">main&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now the state remains the same after you change your code with HMR on, cool right.&lt;/p></description></item><item><title>Angular2 HMR with backend server supported</title><link>https://hujiale.me/angular2-hmr-with-backend-server-supported/</link><pubDate>Sat, 03 Sep 2016 20:53:14 +0800</pubDate><guid>https://hujiale.me/angular2-hmr-with-backend-server-supported/</guid><description>&lt;p>Currenly I am developing a client + server side boilerplate with &lt;a href="https://angular.io">Angular 2&lt;/a> and &lt;a href="http://feathersjs.com">Feathers&lt;/a>.
For server side, I am using &lt;code>ts-node&lt;/code> with nodemon, so far so good. But I find it cumbesome that every time I need to bundle client side code.&lt;br>
After some exploring, I find a way to solve the problem. These are the dependencies:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/AngularClass/angular2-hmr">angular2-hmr&lt;/a> a bootload wrapper on &lt;code>bootstrapModule&lt;/code>, it&amp;rsquo;s cleared classified how to use in github&lt;/li>
&lt;li>&lt;a href="https://github.com/AngularClass/angular2-hmr-loader">angular2-hmr-loader&lt;/a>, a webpack loader to work with the previous one&lt;/li>
&lt;li>&lt;a href="https://github.com/webpack/webpack-dev-middleware">webpack-dev-middleware&lt;/a>, just like &lt;code>webpack-dev-server&lt;/code>&lt;/li>
&lt;li>&lt;a href="https://github.com/glenjamin/webpack-hot-middleware">webpack-hot-middleware&lt;/a>, an &lt;code>express&lt;/code>/&lt;code>feather&lt;/code> middleware just like &lt;code>webpack-dev-server&lt;/code> w/ hot&lt;/li>
&lt;/ul>
&lt;p>All of their READMEs clearly walk you through, it just suprises me that few information could be connected on this while it&amp;rsquo;s a quite general practice in &lt;code>React&lt;/code>&lt;/p></description></item><item><title>Migration to Hugo</title><link>https://hujiale.me/migration-to-hugo/</link><pubDate>Sat, 03 Sep 2016 20:03:12 +0800</pubDate><guid>https://hujiale.me/migration-to-hugo/</guid><description>&lt;p>Yeah. Go&lt;/p></description></item><item><title>Vertical align an unknown size image</title><link>https://hujiale.me/vertical-align-an-unknown-size-image/</link><pubDate>Sun, 27 Mar 2016 01:32:00 +0800</pubDate><guid>https://hujiale.me/vertical-align-an-unknown-size-image/</guid><description>&lt;p>Some ways to vertiacl align an image in a div, the image&amp;rsquo;s width and height are unknown&lt;/p>
&lt;ul>
&lt;li>Use a helper incline-block div to vertica the image. The helper&amp;rsquo;s width is 0&lt;/li>
&lt;li>Use a tricky way top, right, bottom, left all 0 and margin auto&lt;/li>
&lt;li>Use css transform translateY&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="http://codepen.io/elaijuh/pen/pygbBy">demo&lt;/a>&lt;/p></description></item><item><title>Unit test Angular directive</title><link>https://hujiale.me/unit-test-angular-directive/</link><pubDate>Wed, 17 Jun 2015 01:27:00 +0800</pubDate><guid>https://hujiale.me/unit-test-angular-directive/</guid><description>&lt;p>I seldom test angular directive unless there is some DOM mutation being processed in the directive, like add/remove classes, show/hide elements or compile/destroy elements. If you have a heavy dependencies on directives, the unit test will be a little bit clunky as for mocking the inline controller of the required directive. Stack overflow gives several alternatives to do so, I am picking two of them which I prefer to go and demo them here. At the bottom of this post, I will attach the SO link for reference.&lt;/p>
&lt;p>&lt;span class="more">&lt;/span>&lt;/p>
&lt;p>Let say we have two directives &lt;code>foo&lt;/code> and &lt;code>bar&lt;/code> here and bar is requiring foo for it&amp;rsquo;s controller. We want to test directive &lt;code>bar&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="c1">// index.html
&lt;/span>&lt;span class="c1">// &amp;lt;foo&amp;gt;&amp;lt;bar&amp;gt;{{bar}}&amp;lt;/bar&amp;gt;&amp;lt;/foo&amp;gt;
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1">// app.js
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">app&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">directive&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;foo&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">restrict&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;EA&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">controller&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getFoo&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="s1">&amp;#39;foo&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="nx">link&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">angular&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">noop&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">})&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">directive&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;bar&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">restrict&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;EA&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">require&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;^foo&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">link&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">scope&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">elm&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">attrs&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">controller&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">fooCtrl&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">controller&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nx">scope&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">bar&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">fooCtrl&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getFoo&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s1">&amp;#39;bar&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="bind-controller-to-elementdata">Bind controller to element.data&lt;/h3>
&lt;p>Fundamentally Angular will bind directive&amp;rsquo;s inline controller object to it&amp;rsquo;s DOM through data property. When child directive is requiring parent directive, it will finally find the controller object in element.data. Based on this mechanism, we can mock parent directive controller by element.data.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="c1">// speca.js
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">$scope&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">element&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nx">beforeEach&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">inject&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">function&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">$rootScope&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">$compile&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">$scope&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">$rootScope&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">$new&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="nx">element&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">angular&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">element&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;&amp;lt;bar&amp;gt;&amp;lt;/bar&amp;gt;&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// bind the controller to element.data
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">element&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">data&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;$fooController&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">getFoo&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="s1">&amp;#39;foo&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="nx">$compile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">element&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="nx">$scope&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}));&lt;/span>
&lt;span class="nx">it&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;should bind bar to scope&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kd">function&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">expect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">$scope&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">bar&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">toEqual&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;foobar&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="inject-the-directive">Inject the directive&lt;/h3>
&lt;p>Another way is to inject the parent directive and mock it&amp;rsquo;s controller property directly. This is also a straightforward way. But you might need to compile from parent directive even if you only want to test the child directive. See the example below:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="kd">var&lt;/span> &lt;span class="nx">$scope&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">element&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nx">beforeEach&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">inject&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">function&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">$rootScope&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">$compile&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">_fooDirective_&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">fooDirective&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">_fooDirective_&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="nx">fooDirective&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">controller&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getFoo&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="s1">&amp;#39;foo&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">};&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;span class="nx">$scope&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">$rootScope&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">$new&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="c1">// compile from parent directive foo
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">element&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">angular&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">element&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;&amp;lt;foo&amp;gt;&amp;lt;bar&amp;gt;&amp;lt;/bar&amp;gt;&amp;lt;/foo&amp;gt;&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">$compile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">element&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="nx">$scope&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}));&lt;/span>
&lt;span class="nx">it&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;should bind bar to scope&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kd">function&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">expect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">$scope&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">bar&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">toEqual&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;foobar&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>I have a &lt;a href="http://plnkr.co/edit/CUvQi8LQQ13fwHdgzgpw?p=preview">plunker&lt;/a> here to demo both ways of unit testing. And all that shedding light on me is this &lt;a href="http://stackoverflow.com/questions/19227036/testing-directives-that-require-controllers">SO&lt;/a> post.&lt;/p></description></item><item><title>Scope, the most important thing in JavaScript</title><link>https://hujiale.me/scope-the-most-important-thing-in-javascript/</link><pubDate>Sat, 31 Jan 2015 23:07:59 +0800</pubDate><guid>https://hujiale.me/scope-the-most-important-thing-in-javascript/</guid><description>&lt;p>cope and scope chain, the most important mechanism in JavaScript, are barely clearly explained though specified in ECMA-262 version 5.1. Without scope mechanism, there wouldn&amp;rsquo;t be closure and functional programming. This post is aim to elaborate what happens behind from the very beginning when control enters the global code to execution end.&lt;/p>
&lt;p>&lt;span class="more">&lt;/span>&lt;/p>
&lt;p>Firstly, for easy literal, let&amp;rsquo;s agree on the following abbreviation:
&lt;code>GE&lt;/code>: Global Environment
&lt;code>VE&lt;/code>: Variable Environment
&lt;code>LE&lt;/code>: Lexical Environment
&lt;code>OLE&lt;/code>: Outer Lexcial Environment Reference
&lt;code>ER&lt;/code>: Environment Record
&lt;code>EC&lt;/code>: Execution Context
&lt;code>go&lt;/code>: global object (window for browser, global for NodeJS)&lt;/p>
&lt;p>Take following &lt;strong>foo.js&lt;/strong> as example, let&amp;rsquo;s dive into it line by line&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="c1">// foo.js
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">var&lt;/span> &lt;span class="nx">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kd">function&lt;/span> &lt;span class="nx">Foo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">b&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">b&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 3
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">a&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 1
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">a&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">Foo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>Step 1: Control enters into global code
Every javascript file is executed from global code, when the control enters into the global code (before executing the code ), a global EC will be created and push into the EC stack. &lt;code>this&lt;/code> is set to &lt;code>go&lt;/code>. &lt;code>VE&lt;/code> is set to &lt;code>GE&lt;/code> and associated with global &lt;code>EC&lt;/code>. &lt;code>LE&lt;/code> is set to &lt;code>GE&lt;/code> and associated with global &lt;code>EC&lt;/code>. &lt;code>GE&lt;/code> is a javascript internal object which contains &lt;code>ER&lt;/code>(bind with &lt;code>go&lt;/code>) and &lt;code>OLE&lt;/code>(initialized to null). So at this stage, the global &lt;code>EC&lt;/code> looks like:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="c1">// step 1
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">GlobalEC&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">VE&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">ER&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nb">window&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">go&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="nx">OLE&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kc">null&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="nx">LE&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">ER&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nb">window&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">go&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="nx">OLE&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kc">null&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nb">window&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>Step 2: Declaration Binding Instantiation for global EC
After the execution context is created, control will scan the code (not execution) and bind each function declaration and variable declaration. At this stage, &lt;code>VE&lt;/code> and &lt;code>LE&lt;/code> will be augmented the same way, ie. &lt;code>VE&lt;/code> is same as &lt;code>LE&lt;/code>. So the global EC looks like:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="c1">// step 2
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">GlobalEC&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">VE&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">ER&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nb">window&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">go&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">a&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kc">undefined&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">Foo&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">foo&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="nx">OLE&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kc">null&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="nx">LE&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">ER&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nb">window&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">go&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">a&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kc">undefined&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">Foo&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">foo&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="nx">OLE&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kc">null&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nb">window&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The tricky part is when control scans to &lt;code>Foo&lt;/code>&amp;rsquo;s function declaration, it will create a new function object &lt;code>foo&lt;/code> and associate it with &lt;code>Foo&lt;/code>. The common internal properties and special internal properties for function will be assigned to &lt;code>foo&lt;/code>. One of these internal properties is &lt;code>[[scope]]&lt;/code>, from here the scope chain mechanism starts. &lt;code>foo.[[scope]]&lt;/code> is set to current &lt;code>EC.LE&lt;/code>&lt;/p>
&lt;ul>
&lt;li>Step 3: Executing the global code
After the control finishes scanning the code in step 2, it starts to run the code line by line. During the execution, &lt;code>LE&lt;/code> will be updated with the value bound to the variable in &lt;code>ER&lt;/code>, but &lt;code>VE&lt;/code> remains unchanged. And remember &lt;code>foo.[[scope]]&lt;/code> is set to &lt;code>LE&lt;/code> by reference, so it will be updated accordingly. So before the control enters &lt;code>Foo&lt;/code>&amp;rsquo;s code by calling &lt;code>Foo()&lt;/code>, the &lt;code>GlobalEC&lt;/code> looks like:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="c1">// step 3
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">GlobalEC&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">VE&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">ER&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nb">window&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">go&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">a&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kc">undefined&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">Foo&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">foo&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="nx">OLE&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kc">null&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="nx">LE&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">ER&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nb">window&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">go&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">a&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">Foo&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">foo&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="nx">OLE&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kc">null&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nb">window&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>Step 4: Control enters into Foo&amp;rsquo;s code
By calling &lt;code>Foo()&lt;/code>, the control enters Foo&amp;rsquo;s code. Much like the control enters into global code, it will create a &lt;code>EC&lt;/code> for &lt;code>Foo&lt;/code> and push it into the EC stack on the top of global EC. Then it will create &lt;code>VE&lt;/code> and &lt;code>LE&lt;/code> with a null &lt;code>ER&lt;/code> associated. The tricky difference is &lt;code>OLE&lt;/code> is set to &lt;code>foo.[[scope]]&lt;/code> which is global &lt;code>EC.LE&lt;/code>. The scope chain is established right from here. At this stage, &lt;code>FooEC&lt;/code> looks like:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="c1">// step 4
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">FooEC&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">VE&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">ER&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kc">null&lt;/span>
&lt;span class="nx">OLE&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">foo&lt;/span>&lt;span class="p">.[[&lt;/span>&lt;span class="nx">scope&lt;/span>&lt;span class="p">]]&lt;/span> &lt;span class="c1">// GlobalEC.LE
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="nx">LE&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">ER&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kc">null&lt;/span>
&lt;span class="nx">OLE&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">foo&lt;/span>&lt;span class="p">.[[&lt;/span>&lt;span class="nx">scope&lt;/span>&lt;span class="p">]]&lt;/span> &lt;span class="c1">// GlobalEC.LE
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nb">window&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>Step 5: Declaration Binding Instantiation for Foo EC
Like it does in global code, the control will scan the function body before executing it, to bind the function declaration and variable declaration into &lt;code>ER&lt;/code>. Additionally for function code, the formal parameters will be bound to &lt;code>ER&lt;/code>.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="c1">// step 5
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">FooEC&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">VE&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">ER&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nx">b&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="nx">OLE&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">foo&lt;/span>&lt;span class="p">.[[&lt;/span>&lt;span class="nx">scope&lt;/span>&lt;span class="p">]]&lt;/span> &lt;span class="c1">// GlobalEC.LE
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="nx">LE&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">ER&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nx">b&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="nx">OLE&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">foo&lt;/span>&lt;span class="p">.[[&lt;/span>&lt;span class="nx">scope&lt;/span>&lt;span class="p">]]&lt;/span> &lt;span class="c1">// GlobalEC.LE
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nb">window&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>Step 6: Executing the Foo code
After scanning the function code, the control starts to execute the function line by line. During this stage, &lt;code>LE&lt;/code> is likely to be updated while &lt;code>VE&lt;/code> remains unchanged.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="c1">// step 5
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">FooEC&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">VE&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">ER&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nx">b&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="nx">OLE&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">foo&lt;/span>&lt;span class="p">.[[&lt;/span>&lt;span class="nx">scope&lt;/span>&lt;span class="p">]]&lt;/span> &lt;span class="c1">// GlobalEC.LE
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">},&lt;/span>
&lt;span class="nx">LE&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">ER&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nx">b&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="nx">OLE&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">foo&lt;/span>&lt;span class="p">.[[&lt;/span>&lt;span class="nx">scope&lt;/span>&lt;span class="p">]]&lt;/span> &lt;span class="c1">// GlobalEC.LE
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nb">window&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>When control comes to &lt;code>console.log(b)&lt;/code>, it will first find the variable &lt;code>b&lt;/code> in &lt;code>LE.ER&lt;/code> and value 3 is retrieved. When control comes to &lt;code>console.log(a)&lt;/code>, it will first try to find the variable &lt;code>a&lt;/code> in &lt;code>LE.ER&lt;/code>. Unluckily , this time there is no &lt;code>a&lt;/code> to be found, the control keeps finding &lt;code>a&lt;/code> in &lt;code>LE.OLE&lt;/code> which is &lt;code>GlobalEC.LE&lt;/code>, finally &lt;code>a&lt;/code> is found in &lt;code>GlobalEC.LE.ER&lt;/code> with value bound to 1.&lt;/p>
&lt;hr>
&lt;p>&lt;a href="http://www.ecma-international.org/ecma-262/5.1/#sec-13.2">ecma-262 5.1 sec-13.2&lt;/a>&lt;/p>
&lt;p>&lt;a href="http://www.ecma-international.org/ecma-262/5.1/#sec-10.4.3">ecma-262 5.1 sec-10.4.3&lt;/a>&lt;/p></description></item><item><title>Hoisting, what happens behind it</title><link>https://hujiale.me/hoisting-what-happens-behind-it/</link><pubDate>Thu, 01 Jan 2015 01:55:22 +0800</pubDate><guid>https://hujiale.me/hoisting-what-happens-behind-it/</guid><description>&lt;p>We always see the word &lt;strong>hoisting&lt;/strong> in some javascript books and technical blogs. Hoisting is grabbed to explain the phenomenon that we can use a variable before we declare it. That&amp;rsquo;s sound incredible in compiling languages, but in javascript it&amp;rsquo;s really there. Some people might think that the interpretor do a magic to restructure the code and put all variable/function declaration statements at the top of the function body. Thinking like that way might help to write or read the program, but that&amp;rsquo;s not the things truely happen behind. The post is to walk through the mechanism behind hoisting.&lt;/p>
&lt;p>&lt;span class="more">&lt;/span>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="kd">function&lt;/span> &lt;span class="nx">foo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">x&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">x&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// x
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">y&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// undefined
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">z&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// [function: z]
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="nx">z&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// z
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;y&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">z&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;z&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kd">function&lt;/span> &lt;span class="nx">z&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">// overwrite var z
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;z&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">foo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;x&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>There are 3 kinds of scopes in javascript - &lt;code>global scope&lt;/code>, &lt;code>function scope&lt;/code>, &lt;code>eval scope&lt;/code>. We only discuss function scope here. Whenever a function is invoked, the execution context is put on the top of the stack, and before executing the function code step-by-step, there is a pre-stage called &lt;code>Declaration Binding Instantiation&lt;/code>. In this declaration binding stage, an &lt;code>VariableEnvironment&lt;/code>(VE) (in old ECMA-262, it&amp;rsquo;s refered as variable object) is created. Run-time function will refer to this &lt;code>VariableEnvironment&lt;/code> (actually it should be &lt;code>LexicalEnvironment&lt;/code> which is initialized the same as &lt;code>VariableEnvironment&lt;/code>) to identify the variables. So below is what the declaration binding stage do in sequence&lt;/p>
&lt;ol>
&lt;li>Formal parameters are bound to VE&lt;/li>
&lt;li>Function declaration is bound to VE. If the function name is already existing, it will overwrite it.&lt;/li>
&lt;li>&lt;code>Arguments&lt;/code> is bound to VE.&lt;/li>
&lt;li>Variable declaration is bound to VE. If the variable name is already existing, it will do nothing.&lt;/li>
&lt;/ol>
&lt;p>VE for &lt;code>foo&lt;/code> should look like:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="cm">/*
&lt;/span>&lt;span class="cm">VE = {
&lt;/span>&lt;span class="cm"> x: &amp;#39;x&amp;#39;, // formal parameter x
&lt;/span>&lt;span class="cm"> z: [function z], // reference to function z
&lt;/span>&lt;span class="cm"> arguments:
&lt;/span>&lt;span class="cm"> y: undefined
&lt;/span>&lt;span class="cm">};
&lt;/span>&lt;span class="cm">*/&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>So before the execution of the function, all variables/functions are bound to VE already to be later referenced. Now you know the magic behind hoisting.&lt;/p>
&lt;hr>
&lt;p>&lt;a href="http://www.ecma-international.org/ecma-262/5.1/#sec-10.5">http://www.ecma-international.org/ecma-262/5.1/#sec-10.5&lt;/a>&lt;/p></description></item><item><title>Repeat a capturing group, pitfall in RegExp</title><link>https://hujiale.me/repeat-a-capturing-group-pitfall-in-regexp/</link><pubDate>Tue, 23 Dec 2014 01:41:37 +0800</pubDate><guid>https://hujiale.me/repeat-a-capturing-group-pitfall-in-regexp/</guid><description>&lt;p>RegExp is esoteric, known to all, but you will find it incredibly effecient when you start to get used to it. I like to use RegExp, but sometimes I tend to make mistakes, the most common of which is to repeat a capturing group. Let&amp;rsquo;s think about this. Given a string &lt;code>'a=1;b=2;...;k=n'&lt;/code>, I would like to capture &lt;code>k, n&lt;/code> of each pair to form an array like &lt;code>['a', 1, 'b', 2, ... 'k', n]&lt;/code>.&lt;/p>
&lt;p>&lt;span class="more">&lt;/span>&lt;/p>
&lt;p>Below is our first try:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="kd">var&lt;/span> &lt;span class="nx">s&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;a=1;b=2;c=3&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">r&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="sr">/(?:(\w)=(\d))?(?:;(\w)=(\d))*/&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// expected to be [&amp;#39;a&amp;#39;, 1, &amp;#39;b&amp;#39;, 2, &amp;#39;c&amp;#39;, 3]
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">match&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">r&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">slice&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">7&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// [&amp;#39;a&amp;#39;, 1, &amp;#39;c&amp;#39;, 3] !ops
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>As you can see, &lt;code>b, 2&lt;/code> is lost. What happens behind is, when RegExp engine finishes matching for group 3 (which is &amp;lsquo;b&amp;rsquo;) and group 4 (which is 2) it finds the &lt;code>*&lt;/code> which makes it redo the match for group 3 and 4 from last index. So &lt;code>b, 2&lt;/code> is overridden by &lt;code>c, 3&lt;/code>. Here we are trying to repeat a capturing group &lt;code>(?:;(\w)=(\d))*&lt;/code> which leads to the unexpected result.&lt;/p>
&lt;p>So can we achieve the goal by global matching? Let&amp;rsquo;s do the second try:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="kd">var&lt;/span> &lt;span class="nx">s&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;a=1;b=2;c=3&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">r&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="sr">/(?:(\w)=(\d))/g&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">// expected to be [&amp;#39;a&amp;#39;, 1, &amp;#39;b&amp;#39;, 2, &amp;#39;c&amp;#39;, 3]
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">match&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">r&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// [&amp;#39;a=1&amp;#39;, &amp;#39;b=2&amp;#39;, &amp;#39;c=3&amp;#39;] !ops
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Looks like it&amp;rsquo;s even further from what we expected. That&amp;rsquo;s true, in global matching, capturing group lose it&amp;rsquo;s magic and it always return the matching result as a whole RegExp.&lt;/p>
&lt;p>Finally we yield to use some JavaScript snippet, various ways to go, not to address here.&lt;/p>
&lt;hr>
&lt;p>&lt;a href="http://www.regular-expressions.info/captureall.html">http://www.regular-expressions.info/captureall.html&lt;/a>&lt;/p></description></item><item><title>Handle HTTP request in multiple processes in NodeJS</title><link>https://hujiale.me/handle-http-request-in-multiple-processes-in-nodejs/</link><pubDate>Tue, 16 Dec 2014 01:28:26 +0800</pubDate><guid>https://hujiale.me/handle-http-request-in-multiple-processes-in-nodejs/</guid><description>&lt;p>NodeJS is single process based which is good at frequent IO operations. But single process can&amp;rsquo;t fully utilize multi-core CPU. Luckily we have &lt;code>child-process&lt;/code> module in NodeJS to spawn multiple processes. One of the practical examples is handling HTTP request, especially for a large number of concurrent requests. A common way is to use master-worker pattern, a master process working as a proxy to delegate the HTTP requests to child processes with load balance enabled. Cons of master-worker is rapid resource consuming as each process needs to listen on a different port. Another ninja way is to make each child process listen on the same port. Let&amp;rsquo;s have a look at how to achieve that:&lt;/p>
&lt;p>&lt;span class="more">&lt;/span>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="c1">// master.js
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">var&lt;/span> &lt;span class="nx">cp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;child_process&amp;#39;&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="nx">cp1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">cp&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">fork&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;child-process.js&amp;#39;&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="nx">cp2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">cp&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">fork&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;child-process.js&amp;#39;&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="nx">net&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;net&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">server&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">net&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">createServer&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// create a TCP server
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="nx">server&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">on&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;listening&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * this is a tricky part
&lt;/span>&lt;span class="cm"> * it&amp;#39;s not sending the whole server object
&lt;/span>&lt;span class="cm"> * but a stringified message object with server._handle in
&lt;/span>&lt;span class="cm"> * we will have another post to discuss it later
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="nx">cp1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">send&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;server&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">server&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">cp2&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">send&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;server&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">server&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">server&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">close&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="nx">server&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">listen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1337&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="c1">// child.js
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">var&lt;/span> &lt;span class="nx">http&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;http&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">server&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">http&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">createServer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">function&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">req&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">res&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">res&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">writeHead&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">200&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="s1">&amp;#39;Content-Type&amp;#39;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;text/plain&amp;#39;&lt;/span>&lt;span class="p">});&lt;/span>
&lt;span class="nx">res&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">end&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;handled by child, pid: &amp;#39;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">process&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">pid&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s1">&amp;#39;\n&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="nx">process&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">on&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;message&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">m&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">tcpServer&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">m&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="s1">&amp;#39;server&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">tcpServer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">on&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;connection&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">socket&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">server&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">emit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;connection&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">socket&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>In &lt;code>master.js&lt;/code>, we create a TCP server, have it bound to port 1337, and close it immediately once delegate it to child process. In &lt;code>child.js&lt;/code>, we create a HTTP server, not like usual, it doesn&amp;rsquo;t listen on any port explicitly. Now we have the TCP server sent from master process (regard it to be the same TCP server instance for now, but actually not. We will discuss it in another post). Once there is connection to the TCP server, we manually emit the &lt;code>connection&lt;/code> event on HTTP server with the TCP socket passed in. So that any HTTP reqeust to port 1337 will be handled by child process now, one process at a time. Let&amp;rsquo;s use curl to check the result:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">$ curl http://localhost:1337
handled by child, pid: &lt;span class="m">18169&lt;/span>
$ curl http://localhost:1337
handled by child, pid: &lt;span class="m">18168&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title> $provide.decorator - tweak Angular servicer</title><link>https://hujiale.me/provide.decorator-tweak-angular-servicer/</link><pubDate>Thu, 11 Dec 2014 22:56:24 +0800</pubDate><guid>https://hujiale.me/provide.decorator-tweak-angular-servicer/</guid><description>&lt;p>If you are using Angular, you can&amp;rsquo;t avoid depending on third-party modules. Sometimes you find it not that perfect API the module provides, so that you hack into the source code and about to pull request. But the author&amp;rsquo;s comments on your pull request, usually for popular repo, &amp;lsquo;sorry-that&amp;rsquo;s not our priority&amp;rsquo; turns you down totally. Either you work around it or turns to another third-party module. Here is the third option, if you want to share the private data in service closure and provide some API for your specific need, you might find &lt;code>$provide.decorator&lt;/code> helpful. Let&amp;rsquo;s look at this:&lt;/p>
&lt;p>&lt;span class="more">&lt;/span>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="nx">angular&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">module&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;sortModule&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[])&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">factory&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;sortService&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">list&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">service&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">doSort&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">doSort&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">service&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">////////////////
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="nx">doSort&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">list&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">sort&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nx">slice&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// [1, 10, 2, 3] default sort method compared by string
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">myApp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">angular&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">module&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;myApp&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;sortModule&amp;#39;&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;span class="nx">myApp&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">config&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">function&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">$provide&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">$provide&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">decorator&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;sortService&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">$delegate&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">$delegate&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">doCustSort&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">fn&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">list&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">sort&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">fn&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">slice&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// [1, 2, 3, 10] compared by number
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">};&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">$delegate&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="nx">myApp&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">controller&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;MyCtrl&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kd">function&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">$scope&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">sortService&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">sortService&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">doSort&lt;/span>&lt;span class="p">());&lt;/span> &lt;span class="c1">// [1, 10, 2, 3]
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">var&lt;/span> &lt;span class="nx">compare&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">b&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">a&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="nx">b&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">a&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nx">b&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;span class="c1">// we tweaked sortService with doCustSort method
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">sortService&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">doCustSort&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">compare&lt;/span>&lt;span class="p">));&lt;/span> &lt;span class="c1">// [1, 2, 3, 10]
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">});&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Here we add a customized sort method &lt;code>doCustSort&lt;/code> to &lt;code>$delegate&lt;/code> which references to the service itself. So that we can share the private &lt;code>list&lt;/code> and do some specific logic on our need. And basically you can tweak most components in Angular as long as it&amp;rsquo;s a &lt;code>$provide&lt;/code>.&lt;/p>
&lt;p>&lt;a href="http://plnkr.co/edit/etgYtx?p=preview">Plnkr demo&lt;/a>&lt;/p></description></item><item><title>Function overload in JavaScript</title><link>https://hujiale.me/function-overload-in-javascript/</link><pubDate>Thu, 04 Dec 2014 01:14:12 +0800</pubDate><guid>https://hujiale.me/function-overload-in-javascript/</guid><description>&lt;p>As we know, Javscript has no function overload in nature. If you try to declare the same function with different signature, the previous one will be overwritten rather than overloaded. As function overload in most OO programming languages are by means of parameters, it operates on different logic according to the passed in parameters. So there is still a way to do function overload in JS.&lt;/p>
&lt;p>&lt;span class="more">&lt;/span>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="kd">var&lt;/span> &lt;span class="nx">foo&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">bar&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">switch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">arguments&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">length&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">arguments&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">case&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">arguments&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">arguments&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">foo&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">bar&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// 0
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">foo&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">bar&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 1
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">foo&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">bar&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 3
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This approach is workable but not tidy and flexiable. With more and more overloads, the switch block becomes longer and longer scaring away developers.&lt;/p>
&lt;p>With &lt;code>function.length&lt;/code> and &lt;code>closure&lt;/code>, we could implement the same in a neat and ninja way.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="kd">var&lt;/span> &lt;span class="nx">foo&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">overloadMethod&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">fn&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">baseFn&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">name&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">name&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">fn&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">length&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="nx">arguments&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">length&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">fn&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">apply&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">arguments&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">typeof&lt;/span> &lt;span class="nx">baseFn&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="s1">&amp;#39;function&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">baseFn&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">apply&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">arguments&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// baseFn is in a closure
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;span class="nx">foo&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">overloadMethod&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;bar&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kd">function&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">})&lt;/span>
&lt;span class="nx">foo&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">overloadMethod&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;bar&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kd">function&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">x&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">x&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">})&lt;/span>
&lt;span class="nx">foo&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">overloadMethod&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;bar&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kd">function&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">y&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">x&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">y&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">})&lt;/span>
&lt;span class="nx">foo&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">bar&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// 0
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">foo&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">bar&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 1
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">foo&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">bar&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 3
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>So everytime you want to overload the method, just call &lt;code>foo.overloadMethod&lt;/code> with the method name and anonymous function passed in. It looks like &lt;code>foo.bar&lt;/code> is overwritten again and again, but actually every single version of &lt;code>foo.bar&lt;/code> is completely kept in closure to be referenced.&lt;/p>
&lt;hr>
&lt;p>Reference book: &lt;a href="http://www.amazon.com/Secrets-JavaScript-Ninja-John-Resig/dp/193398869X/ref=sr_1_1?ie=UTF8&amp;amp;qid=1417626477&amp;amp;sr=8-1&amp;amp;keywords=secrets+of+javascript+ninja">Secrets of the JavaScript Ninja&lt;/a>, &lt;a href="http://ejohn.org/">John Resig&lt;/a>&lt;/p></description></item><item><title>JavaScript prototype and inheritance</title><link>https://hujiale.me/javascript-prototype-and-inheritance/</link><pubDate>Mon, 01 Dec 2014 05:13:52 +0800</pubDate><guid>https://hujiale.me/javascript-prototype-and-inheritance/</guid><description>&lt;p>Inheritance in JS is quite different from class based inheritance which is popular for being used in C++ and Java. In class based inheritance language, we have to abstract a class which is not a real world subject. While in prototype based inheritance, we can implement inheritance on objects directly.&lt;/p>
&lt;p>&lt;span class="more">&lt;/span>&lt;/p>
&lt;p>The post walks you through how to do inheritance in JS.&lt;/p>
&lt;h3 id="simple-object-inheritance">Simple object inheritance&lt;/h3>
&lt;p>As every object has an internal property &lt;code>[[prototype]]&lt;/code> which points to it&amp;rsquo;s prototype, we can directly assign a super object to it. [[prototype]] could be implemented in different ways in different browsers. In Chrome and Firefox, it can be refered as &lt;code>__proto__&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="kd">var&lt;/span> &lt;span class="nx">sup&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nx">x&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;x&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">y&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;y&amp;#39;&lt;/span>&lt;span class="p">};&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">sub&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nx">a&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;a&amp;#39;&lt;/span>&lt;span class="p">};&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">sub&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">x&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// undefined
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="nx">sub&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">__proto__&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">sup&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">sub&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">x&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// x
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="inheritance-by-prototype-chaining">Inheritance by prototype chaining&lt;/h3>
&lt;p>In most of the time, especially in OO style, we would like to have a constructor and then create objects from it. In JS, constructor is not a class and not different from any regular function except that you can &lt;code>new&lt;/code> it. Usually a constructor does not explicitly return anything, it&amp;rsquo;s side effect is to assign all the &lt;code>this&lt;/code> properties you defined in the constructor body to the object and return it. A constructor function has a &lt;code>prototype&lt;/code> property which points to the prototype object of the constructor. The object created by the constructor has it&amp;rsquo;s [[prototype]] pointing to the constructor&amp;rsquo;s prototype object. Inheritance is implemented by assigning super object to sub constructor&amp;rsquo;s prototype. Take a look at this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="kd">function&lt;/span> &lt;span class="nx">Sup&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;x&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;y&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">function&lt;/span> &lt;span class="nx">Sub&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;a&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">Sub&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">prototype&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Sup&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">sub&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Sub&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">sub&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">x&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// x
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The sub object has no x itself, so it will find x in it&amp;rsquo;s prototype which is a super object. This is cool, but the problem comes when there is reference property in super object.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="kd">function&lt;/span> &lt;span class="nx">Sup&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;x&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">z&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;z&amp;#39;&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">function&lt;/span> &lt;span class="nx">Sub&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;a&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">Sub&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">prototype&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Sup&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">sub1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Sub&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">sub2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Sub&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="nx">sub1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">z&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">push&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;zz&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">sub1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">z&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// [&amp;#39;z&amp;#39;, &amp;#39;zz&amp;#39;]
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">sub2&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">z&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// [&amp;#39;z&amp;#39;, &amp;#39;zz&amp;#39;], !expected to be [&amp;#39;z&amp;#39;]
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Both sub1.z and sub2.z are pointing to the same z in super object. Any sub object&amp;rsquo;s operation on z will have impact on all sub objects. That&amp;rsquo;s dangerous!&lt;/p>
&lt;h3 id="classical-inheritance-by-constructor-stealing">Classical inheritance by constructor stealing&lt;/h3>
&lt;p>Now we see the problem in prototype chaining inheritance, is there a way to solve it?&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="kd">function&lt;/span> &lt;span class="nx">Sup&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">z&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;z&amp;#39;&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">function&lt;/span> &lt;span class="nx">Sub&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">Sup&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">call&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;a&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">sub1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Sub&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">sub2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Sub&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="nx">sub1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">z&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">push&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;zz&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">sub1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">z&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// [&amp;#39;z&amp;#39;, &amp;#39;zz&amp;#39;]
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">sub2&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">z&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// [&amp;#39;z&amp;#39;], !cool
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In sub constructor we steal super constructor and call it with &lt;code>this&lt;/code> reference. Now that every sub object has a copy of z and will not interfere with each other. This solves the problem in prototype chaining inheritance, but it&amp;rsquo;s downside is every property including method to be inheritted should be defined inside the super constructor. So there is no method reuse. How about we combine constructor stealing and prototype chaining together?&lt;/p>
&lt;h3 id="combination-inheritance-pseudoclassical-inheritance">Combination inheritance (pseudoclassical inheritance)&lt;/h3>
&lt;p>Both prototype chaining inheritance and constructor stealing inheritance have downsides, what if we combine them together?&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="kd">function&lt;/span> &lt;span class="nx">Sup&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">z&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;z&amp;#39;&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">Sup&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">prototype&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">mo&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;mo&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;span class="kd">function&lt;/span> &lt;span class="nx">Sub&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">Sup&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">call&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;a&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">Sub&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">prototype&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Sup&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">sub1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Sub&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">sub2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Sub&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="nx">sub1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">z&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">push&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;zz&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">sub1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">z&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// [&amp;#39;z&amp;#39;, &amp;#39;zz&amp;#39;]
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">sub1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">mo&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// mo
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">sub2&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">z&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// [&amp;#39;z&amp;#39;]
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">sub2&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">mo&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// mo
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>That&amp;rsquo;s cool, we don&amp;rsquo;t need to define methods in super constructor&amp;rsquo;s body and they are reusable now. The combination inheritance addresses both downsides of prototype chaining and constructor stealing. It&amp;rsquo;s widely used in real life. It also preserves the behavior of &lt;code>instanceof&lt;/code> and &lt;code>isPrototypeOf&lt;/code> which looks like perfect now. But, yeah there is always another but :), if you look deep into the pattern, you might find that the super constructor has been called twice, &lt;code>Sup.call(this)&lt;/code> and &lt;code>Sub.prototype = new Sup()&lt;/code> which means the set of properties are duplicated in memory. This is an unavoidable ineffecient part of combination inheritance. And on another hand, combination inheritance still relies on constructor function which is kind of like class inheritance, while JS is really good at inheritance on objects. &lt;a href="http://www.crockford.com">Douglas Crockford&lt;/a> has introduced prototypal inheritance in 2006 based on the premise that inheritance on objects.&lt;/p>
&lt;h3 id="prototypal-inheritance">Prototypal inheritance&lt;/h3>
&lt;p>So how to do inheritance directly on objects without constructors?&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="kd">function&lt;/span> &lt;span class="nx">create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">supObj&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kd">function&lt;/span> &lt;span class="nx">Empty&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{};&lt;/span>
&lt;span class="nx">Empty&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">prototype&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">supObj&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Empty&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Crockford introduced a factory like function to create the sub object based on the passed in super object. So super constructor is not a must now. But the type of the sub object is lost. Based on this create function, Crockford introduced parasitic inheritance which is closer to real life.&lt;/p>
&lt;h3 id="parasitic-inheritance">Parasitic inheritance&lt;/h3>
&lt;p>Much like prototypal inheritance, parasitic inheritance just encapsulates all the properties or methods for the sub object in one function.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="kd">function&lt;/span> &lt;span class="nx">createAnother&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">supObj&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">sub&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">supObj&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">sub&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;a&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="nx">sub&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">mo&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;mo&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">sub&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now the sub object has all the properties of super object and it&amp;rsquo;s own property a and method mo. Parasitic inheritance addresses the duplicated properties downside in combination inheritance, but it loses object type which means &lt;code>instanceof&lt;/code> and &lt;code>isPrototypeOf&lt;/code> don&amp;rsquo;t work for sub object any more. Let&amp;rsquo;s keep improvement, finally we work out a way combining constructor stealing and parasitic inheritance.&lt;/p>
&lt;h3 id="parasitic-combination-inheritance">Parasitic combination inheritance&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="kd">function&lt;/span> &lt;span class="nx">create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">supObj&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kd">function&lt;/span> &lt;span class="nx">Empty&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{};&lt;/span>
&lt;span class="nx">Empty&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">prototype&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">supObj&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Empty&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">function&lt;/span> &lt;span class="nx">inheritPrototype&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">Sub&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">Sup&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">subPrototype&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">Sup&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">prototype&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">subPrototype&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">constructor&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">Sub&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// link constructor back to Sub
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">Sub&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">prototype&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">subPrototype&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">function&lt;/span> &lt;span class="nx">Sup&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;x&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">z&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;z&amp;#39;&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">Sup&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">prototype&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">mo&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;mo&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;span class="kd">function&lt;/span> &lt;span class="nx">Sub&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">Sup&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">call&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;a&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">inheritPrototype&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">Sub&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">Sup&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">sub1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Sub&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">sub2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Sub&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="nx">sub1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">z&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">push&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;zz&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="nx">sub1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">mo&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// mo
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">cnosole&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">sub1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">z&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// [&amp;#39;z&amp;#39;, &amp;#39;zz&amp;#39;]
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">sub2&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">mo&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// mo
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">sub2&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">z&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// [&amp;#39;z&amp;#39;]
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">sub1&lt;/span> &lt;span class="k">instanceof&lt;/span> &lt;span class="nx">Sub&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// true
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">Sub&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">prototype&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">isPrototypeOf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">sub2&lt;/span>&lt;span class="p">));&lt;/span> &lt;span class="c1">//true
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now both the downside in combination inheritance - duplicated properties and the downside in parasitic inheritance - object type lost are addressed. We are kind of having a perfect inheritance machenism now. BUT&amp;hellip;personally I will not suggest to use inheritance heavily unless you want to mess yourself up.&lt;/p></description></item></channel></rss>